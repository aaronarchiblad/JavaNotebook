package basics;

public class BinaryTest {
    public static void main(String[] args) {
        /*
        Java中可以用2, 8, 10, 16进制表示.
        1. 二进制前面用0b表示
        2. 八进制前面用0表示
        3. 十进制什么都不用加
        4. 十六进制前面用0x表示
        但是打印出来都是以十进制的方式打印.
         */

        int a1 = 0b1010;
        int b1 = 01234;
        int c1 = 1234;
        int d1 = 0x12345F;

        System.out.println(a1);
        System.out.println(b1);
        System.out.println(c1);
        System.out.println(d1);

        /*
        计算机如何保存正负数
        1. 在计算机的底层都是以补码的形式来存储数据
        2. 整数是三码合一(源码, 反码, 补码)
        3. 最高的bit位, 表示数值的正负, 0为正, 1为负
        4. 对于一个二进制数, 把其首位从0变成1, 所得到的是这个负数的源码
        5. 把所有的位0/1调换, 得到这个负数的反码
        6. 对反码加1得到补码
        例如:
        <1> 14的二进制位 0 | 0 0 0 1 1 1 0, 把首位的0换成1, 变成-14的源码 1 | 0 0 0 1 1 1 0,
        对除了符号位外的所有位取反得到反码 1 | 1 1 1 0 0 0 1, 最后反码加1, 得到补码 1 | 1 1 1 0 0 1 0
        底层存 -14 是 1 | 1 1 1 0 0 1 0

        <2> 给定补码: 1 | 0 1 1 1 0 1 1, 求是哪个十进制的补码
        减一求反码: 1 | 0 1 1 1 0 1 0
        求源码: 1 | 1 0 0 0 1 0 1
        1 * 2^6 + 1 * 2^2 + 1 * 2^1 = 69
        因此1 | 0 1 1 1 0 1 1是69的补码

        <3> 这也就解释了为什么int型的128强转成byte后变成了-128
        因为-127的原码是1 | 1 1 1 1 1 1 1
        反码: 1 | 0 0 0 0 0 0 0
        补码是 1 | 0 0 0 0 0 0 1
        而-128的补码是1 | 0 0 0 0 0 0 0
        当执行强转的时候, 只保留了int最后的8位, 也就是1 | 0 0 0 0 0 0 0
        因此强转过后会变成-128
         */

        /*
        二进制与十进制的转换
        1. 二进制转成十进制, n * 2^i + n * 2^(i-1) + ... + n * 2^1
        如: 0 | 0 0 0 1 1 1 0
        0 * 2^6 + 0 * 2^5 + 0 * 2^4 + 1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 0 * 2^0 = 8 + 4 + 2 + 0 = 14
         */

        /*
        十进制转化成二进制: 除2取余的逆
        如: 13
        13 / 2 = 6 余 1
        6 / 2 = 3 余 0
        3 / 2 = 1 余 1
        1 / 2 = 0 余 1
        1011 取逆 1101
         */

        /*
        各进制之间的转换, 把二进制作为桥梁, 如果我要把十进制转化成十六进制, 我先把十进制转化成二进制
        然后再从二进制转化成十六进制. 因为二进制和十六进制都是2的几次幂, 因此转换比较方便.
        1. 二进制转八进制, 先把二进制每三位转成一个八进制的, 然后最后合并到一起就是八进制.
        2. 同理可得十六进制.
        3. 八进制转换成二进制, 把每一个八进制的拆成一个二进制的. 最后拼到一起
        4. 同理可得十六进制转二进制.
         */

    }
}
